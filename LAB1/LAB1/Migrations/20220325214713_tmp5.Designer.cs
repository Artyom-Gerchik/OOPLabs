// <auto-generated />
using System;
using LAB1.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LAB1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220325214713_tmp5")]
    partial class tmp5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("LAB1.Entities.AdminRollBack.DeletedBankAccount", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BankAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("ClientId");

                    b.ToTable("DeletedBankAccount");
                });

            modelBuilder.Entity("LAB1.Entities.AdminRollBack.OpennedBankAccount", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BankAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("ClientId");

                    b.ToTable("OpennedBankAccount");
                });

            modelBuilder.Entity("LAB1.Entities.AdminRollBack.RollBackClosedDeposit", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BankDepositId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("BankDepositId");

                    b.HasIndex("ClientId");

                    b.ToTable("RollBackClosedDeposit");
                });

            modelBuilder.Entity("LAB1.Entities.AdminRollBack.RollBackDeletedInstallmentPlan", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InstallmentPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("TransferId")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("ClientId");

                    b.HasIndex("InstallmentPlanId");

                    b.HasIndex("TransferId");

                    b.ToTable("RollBackDeletedInstallmentPlan");
                });

            modelBuilder.Entity("LAB1.Entities.AdminRollBack.RollBackOpenedDeposit", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BankDepositId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("BankDepositId");

                    b.HasIndex("ClientId");

                    b.ToTable("RollBackOpenedDeposit");
                });

            modelBuilder.Entity("LAB1.Entities.AdminRollBack.RollBackOpennedInstallmentPlan", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InstallmentPlanId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("ClientId");

                    b.HasIndex("InstallmentPlanId");

                    b.ToTable("RollBackOpennedInstallmentPlan");
                });

            modelBuilder.Entity("LAB1.Entities.AdminRollBack.RollBackTransferBetweenBankAccounts", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BankAccountToDepositedId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BankAccountWhereWithdrawedId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("TransferId")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("BankAccountToDepositedId");

                    b.HasIndex("BankAccountWhereWithdrawedId");

                    b.HasIndex("TransferId");

                    b.ToTable("RollBackTransferBetweenBankAccounts");
                });

            modelBuilder.Entity("LAB1.Entities.AdminRollBack.RollBackTransferBetweenBankDeposits", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BankDepositToDepositedId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BankDepositWhereWithdrawedId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("TransferId")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("BankDepositToDepositedId");

                    b.HasIndex("BankDepositWhereWithdrawedId");

                    b.HasIndex("TransferId");

                    b.ToTable("RollBackTransferBetweenBankDeposits");
                });

            modelBuilder.Entity("LAB1.Entities.BankAccount", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AmountOfMoney")
                        .HasColumnType("REAL");

                    b.Property<int?>("BankId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Hidden")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsASalaryProjectAccount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("ClientId");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("LAB1.Entities.BankApproves", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BankId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("ClientId");

                    b.ToTable("BankApproves");
                });

            modelBuilder.Entity("LAB1.Entities.BankDeposit", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AmountOfMoney")
                        .HasColumnType("REAL");

                    b.Property<int?>("BankId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateOfDeal")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfMoneyBack")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Hidden")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HowMuchLasts")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Percent")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("ClientId");

                    b.ToTable("BankDeposit");
                });

            modelBuilder.Entity("LAB1.Entities.Company", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BankIdentificationCode")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsItBank")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LegalAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("LegalName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PayerAccountNumber")
                        .HasColumnType("TEXT");

                    b.Property<double?>("SalaryForWorkers")
                        .HasColumnType("REAL");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 4,
                            BankIdentificationCode = "1111111111",
                            IsItBank = false,
                            LegalAddress = "Palmyra",
                            LegalName = "Vagner Group",
                            PayerAccountNumber = "123456789",
                            SalaryForWorkers = 100000.0,
                            Type = "OPG"
                        },
                        new
                        {
                            Id = 5,
                            BankIdentificationCode = "1111111111",
                            IsItBank = false,
                            LegalAddress = "Sirya",
                            LegalName = "Slavic Union",
                            PayerAccountNumber = "123456788",
                            SalaryForWorkers = 200000.0,
                            Type = "OPG"
                        },
                        new
                        {
                            Id = 6,
                            BankIdentificationCode = "1111111111",
                            IsItBank = false,
                            LegalAddress = "Burdj-Halif",
                            LegalName = "VDV",
                            PayerAccountNumber = "123456787",
                            SalaryForWorkers = 300000.0,
                            Type = "OPG"
                        },
                        new
                        {
                            Id = 7,
                            BankIdentificationCode = "1111111111",
                            IsItBank = false,
                            LegalAddress = "Grozniy",
                            LegalName = "CCO",
                            PayerAccountNumber = "123456786",
                            SalaryForWorkers = 400000.0,
                            Type = "OPG"
                        },
                        new
                        {
                            Id = 8,
                            BankIdentificationCode = "2222222222",
                            IsItBank = false,
                            LegalAddress = "London",
                            LegalName = "SAS",
                            PayerAccountNumber = "123456785",
                            SalaryForWorkers = 500000.0,
                            Type = "OPG"
                        },
                        new
                        {
                            Id = 9,
                            BankIdentificationCode = "2222222222",
                            IsItBank = false,
                            LegalAddress = "Paris",
                            LegalName = "GIGN",
                            PayerAccountNumber = "123456784",
                            SalaryForWorkers = 600000.0,
                            Type = "OPG"
                        },
                        new
                        {
                            Id = 10,
                            BankIdentificationCode = "2222222222",
                            IsItBank = false,
                            LegalAddress = "Berlin",
                            LegalName = "KSK",
                            PayerAccountNumber = "123456783",
                            SalaryForWorkers = 700000.0,
                            Type = "OPG"
                        },
                        new
                        {
                            Id = 11,
                            BankIdentificationCode = "3333333333",
                            IsItBank = false,
                            LegalAddress = "Poznan",
                            LegalName = "GROM",
                            PayerAccountNumber = "123456782",
                            SalaryForWorkers = 800000.0,
                            Type = "OPG"
                        },
                        new
                        {
                            Id = 12,
                            BankIdentificationCode = "3333333333",
                            IsItBank = false,
                            LegalAddress = "St-Petersburg",
                            LegalName = "FSKN",
                            PayerAccountNumber = "123456781",
                            SalaryForWorkers = 900000.0,
                            Type = "OPG"
                        },
                        new
                        {
                            Id = 13,
                            BankIdentificationCode = "3333333333",
                            IsItBank = false,
                            LegalAddress = "Moscow",
                            LegalName = "FSB",
                            PayerAccountNumber = "123456780",
                            SalaryForWorkers = 1000000.0,
                            Type = "OPG"
                        });
                });

            modelBuilder.Entity("LAB1.Entities.Credit", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AmountOfMoney")
                        .HasColumnType("REAL");

                    b.Property<int?>("BankId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfDeal")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateToPay")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DurationInMonths")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HowMuchLasts")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Percent")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("Credit");
                });

            modelBuilder.Entity("LAB1.Entities.CreditsAndApproves", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BankId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CreditId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreditId");

                    b.ToTable("CreditsAndApproves");
                });

            modelBuilder.Entity("LAB1.Entities.InstallmentPlan", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AmountOfMoney")
                        .HasColumnType("REAL");

                    b.Property<int?>("BankId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Blocked")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfDeal")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateToPay")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DurationInMonths")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Frozen")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Hidden")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HowMuchLasts")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("InstallmentPlan");
                });

            modelBuilder.Entity("LAB1.Entities.InstallmentPlanApproves", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BankId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Hidden")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InstallmentPlanId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("ClientId");

                    b.HasIndex("InstallmentPlanId");

                    b.ToTable("InstallmentPlanApproves");
                });

            modelBuilder.Entity("LAB1.Entities.Role", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "user"
                        },
                        new
                        {
                            Id = 3,
                            Name = "client"
                        },
                        new
                        {
                            Id = 4,
                            Name = "foreignClient"
                        },
                        new
                        {
                            Id = 5,
                            Name = "specialist"
                        },
                        new
                        {
                            Id = 6,
                            Name = "manager"
                        },
                        new
                        {
                            Id = 7,
                            Name = "operator"
                        });
                });

            modelBuilder.Entity("LAB1.Entities.Transfer", b =>
                {
                    b.Property<double?>("Id")
                        .HasColumnType("REAL");

                    b.Property<double?>("AmountOfMoney")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("LAB1.Entities.UserCategories.User", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LAB1.Entities.Bank", b =>
                {
                    b.HasBaseType("LAB1.Entities.Company");

                    b.Property<int?>("AmountOfAdministrators")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AmountOfClients")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AmountOfManagers")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AmountOfMoney")
                        .HasColumnType("REAL");

                    b.Property<int?>("AmountOfOperators")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ClientId");

                    b.ToTable("Banks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BankIdentificationCode = "1111111111",
                            IsItBank = true,
                            LegalAddress = "Dzerzhinskogo District 1",
                            LegalName = "firstBank",
                            PayerAccountNumber = "111111111",
                            Type = "OAO",
                            AmountOfAdministrators = 0,
                            AmountOfClients = 0,
                            AmountOfManagers = 0,
                            AmountOfMoney = 100500.0,
                            AmountOfOperators = 0
                        },
                        new
                        {
                            Id = 2,
                            BankIdentificationCode = "2222222222",
                            IsItBank = true,
                            LegalAddress = "Dzerzhinskogo District 2",
                            LegalName = "secondBank",
                            PayerAccountNumber = "222222222",
                            Type = "OAO",
                            AmountOfAdministrators = 0,
                            AmountOfClients = 0,
                            AmountOfManagers = 0,
                            AmountOfMoney = 1005005.0,
                            AmountOfOperators = 0
                        },
                        new
                        {
                            Id = 3,
                            BankIdentificationCode = "3333333333",
                            IsItBank = true,
                            LegalAddress = "Dzerzhinskogo District 3",
                            LegalName = "thirdBank",
                            PayerAccountNumber = "333333333",
                            Type = "OAO",
                            AmountOfAdministrators = 0,
                            AmountOfClients = 0,
                            AmountOfManagers = 0,
                            AmountOfMoney = 1005005.0,
                            AmountOfOperators = 0
                        });
                });

            modelBuilder.Entity("LAB1.Entities.UserCategories.Administrator", b =>
                {
                    b.HasBaseType("LAB1.Entities.UserCategories.User");

                    b.Property<int?>("BankId")
                        .HasColumnType("INTEGER");

                    b.ToTable("Administrators", (string)null);
                });

            modelBuilder.Entity("LAB1.Entities.UserCategories.Client", b =>
                {
                    b.HasBaseType("LAB1.Entities.UserCategories.User");

                    b.Property<bool?>("AtSalaryProject")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("BankBalance")
                        .HasColumnType("REAL");

                    b.Property<int?>("CurrentBankId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ManagerId1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ManagerId2")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PassportNumberAndSeries")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Salary")
                        .HasColumnType("REAL");

                    b.Property<int?>("SpecialistId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WorkId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ManagerId1");

                    b.HasIndex("ManagerId2");

                    b.HasIndex("OperatorId");

                    b.HasIndex("SpecialistId");

                    b.HasIndex("WorkId");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("LAB1.Entities.UserCategories.Operator", b =>
                {
                    b.HasBaseType("LAB1.Entities.UserCategories.User");

                    b.Property<int?>("BankId")
                        .HasColumnType("INTEGER");

                    b.ToTable("Operators", (string)null);
                });

            modelBuilder.Entity("LAB1.Entities.UserCategories.Specialist", b =>
                {
                    b.HasBaseType("LAB1.Entities.UserCategories.User");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CompanyId");

                    b.ToTable("Specialists", (string)null);
                });

            modelBuilder.Entity("LAB1.Entities.UserCategories.Manager", b =>
                {
                    b.HasBaseType("LAB1.Entities.UserCategories.Operator");

                    b.ToTable("Managers", (string)null);
                });

            modelBuilder.Entity("LAB1.Entities.AdminRollBack.DeletedBankAccount", b =>
                {
                    b.HasOne("LAB1.Entities.UserCategories.Administrator", null)
                        .WithMany("DeletedBankAccounts")
                        .HasForeignKey("AdministratorId");

                    b.HasOne("LAB1.Entities.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId");

                    b.HasOne("LAB1.Entities.UserCategories.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("BankAccount");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("LAB1.Entities.AdminRollBack.OpennedBankAccount", b =>
                {
                    b.HasOne("LAB1.Entities.UserCategories.Administrator", null)
                        .WithMany("OpennedBankAccounts")
                        .HasForeignKey("AdministratorId");

                    b.HasOne("LAB1.Entities.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId");

                    b.HasOne("LAB1.Entities.UserCategories.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("BankAccount");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("LAB1.Entities.AdminRollBack.RollBackClosedDeposit", b =>
                {
                    b.HasOne("LAB1.Entities.UserCategories.Administrator", null)
                        .WithMany("ClosedDepositsToRollBack")
                        .HasForeignKey("AdministratorId");

                    b.HasOne("LAB1.Entities.BankDeposit", "BankDeposit")
                        .WithMany()
                        .HasForeignKey("BankDepositId");

                    b.HasOne("LAB1.Entities.UserCategories.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("BankDeposit");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("LAB1.Entities.AdminRollBack.RollBackDeletedInstallmentPlan", b =>
                {
                    b.HasOne("LAB1.Entities.UserCategories.Administrator", null)
                        .WithMany("DeletedInstallmentPlans")
                        .HasForeignKey("AdministratorId");

                    b.HasOne("LAB1.Entities.UserCategories.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("LAB1.Entities.InstallmentPlan", "InstallmentPlan")
                        .WithMany()
                        .HasForeignKey("InstallmentPlanId");

                    b.HasOne("LAB1.Entities.Transfer", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferId");

                    b.Navigation("Client");

                    b.Navigation("InstallmentPlan");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("LAB1.Entities.AdminRollBack.RollBackOpenedDeposit", b =>
                {
                    b.HasOne("LAB1.Entities.UserCategories.Administrator", null)
                        .WithMany("OpennedDepositsToRollBack")
                        .HasForeignKey("AdministratorId");

                    b.HasOne("LAB1.Entities.BankDeposit", "BankDeposit")
                        .WithMany()
                        .HasForeignKey("BankDepositId");

                    b.HasOne("LAB1.Entities.UserCategories.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("BankDeposit");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("LAB1.Entities.AdminRollBack.RollBackOpennedInstallmentPlan", b =>
                {
                    b.HasOne("LAB1.Entities.UserCategories.Administrator", null)
                        .WithMany("OpennedInstallmentPlans")
                        .HasForeignKey("AdministratorId");

                    b.HasOne("LAB1.Entities.UserCategories.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("LAB1.Entities.InstallmentPlan", "InstallmentPlan")
                        .WithMany()
                        .HasForeignKey("InstallmentPlanId");

                    b.Navigation("Client");

                    b.Navigation("InstallmentPlan");
                });

            modelBuilder.Entity("LAB1.Entities.AdminRollBack.RollBackTransferBetweenBankAccounts", b =>
                {
                    b.HasOne("LAB1.Entities.UserCategories.Administrator", null)
                        .WithMany("TransfersBetweenBankAccounts")
                        .HasForeignKey("AdministratorId");

                    b.HasOne("LAB1.Entities.BankAccount", "BankAccountToDeposited")
                        .WithMany()
                        .HasForeignKey("BankAccountToDepositedId");

                    b.HasOne("LAB1.Entities.BankAccount", "BankAccountWhereWithdrawed")
                        .WithMany()
                        .HasForeignKey("BankAccountWhereWithdrawedId");

                    b.HasOne("LAB1.Entities.Transfer", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferId");

                    b.Navigation("BankAccountToDeposited");

                    b.Navigation("BankAccountWhereWithdrawed");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("LAB1.Entities.AdminRollBack.RollBackTransferBetweenBankDeposits", b =>
                {
                    b.HasOne("LAB1.Entities.UserCategories.Administrator", null)
                        .WithMany("TransfersBetweenBankDeposits")
                        .HasForeignKey("AdministratorId");

                    b.HasOne("LAB1.Entities.BankDeposit", "BankDepositToDeposited")
                        .WithMany()
                        .HasForeignKey("BankDepositToDepositedId");

                    b.HasOne("LAB1.Entities.BankDeposit", "BankDepositWhereWithdrawed")
                        .WithMany()
                        .HasForeignKey("BankDepositWhereWithdrawedId");

                    b.HasOne("LAB1.Entities.Transfer", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferId");

                    b.Navigation("BankDepositToDeposited");

                    b.Navigation("BankDepositWhereWithdrawed");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("LAB1.Entities.BankAccount", b =>
                {
                    b.HasOne("LAB1.Entities.Bank", null)
                        .WithMany("OpennedBankAccounts")
                        .HasForeignKey("BankId");

                    b.HasOne("LAB1.Entities.UserCategories.Client", null)
                        .WithMany("OpennedBankAccounts")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("LAB1.Entities.BankApproves", b =>
                {
                    b.HasOne("LAB1.Entities.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId");

                    b.HasOne("LAB1.Entities.UserCategories.Client", null)
                        .WithMany("BanksAndApproves")
                        .HasForeignKey("ClientId");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("LAB1.Entities.BankDeposit", b =>
                {
                    b.HasOne("LAB1.Entities.Bank", null)
                        .WithMany("OpennedBankDeposits")
                        .HasForeignKey("BankId");

                    b.HasOne("LAB1.Entities.UserCategories.Client", null)
                        .WithMany("OpennedBankDeposits")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("LAB1.Entities.Credit", b =>
                {
                    b.HasOne("LAB1.Entities.Bank", null)
                        .WithMany("OpennedCredits")
                        .HasForeignKey("BankId");
                });

            modelBuilder.Entity("LAB1.Entities.CreditsAndApproves", b =>
                {
                    b.HasOne("LAB1.Entities.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId");

                    b.HasOne("LAB1.Entities.UserCategories.Client", null)
                        .WithMany("CreditsAndApproves")
                        .HasForeignKey("ClientId");

                    b.HasOne("LAB1.Entities.Credit", "Credit")
                        .WithMany()
                        .HasForeignKey("CreditId");

                    b.Navigation("Bank");

                    b.Navigation("Credit");
                });

            modelBuilder.Entity("LAB1.Entities.InstallmentPlan", b =>
                {
                    b.HasOne("LAB1.Entities.Bank", null)
                        .WithMany("OpennedInstallmentPlans")
                        .HasForeignKey("BankId");
                });

            modelBuilder.Entity("LAB1.Entities.InstallmentPlanApproves", b =>
                {
                    b.HasOne("LAB1.Entities.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId");

                    b.HasOne("LAB1.Entities.UserCategories.Client", null)
                        .WithMany("InstallmentPlansAndApproves")
                        .HasForeignKey("ClientId");

                    b.HasOne("LAB1.Entities.InstallmentPlan", "InstallmentPlan")
                        .WithMany()
                        .HasForeignKey("InstallmentPlanId");

                    b.Navigation("Bank");

                    b.Navigation("InstallmentPlan");
                });

            modelBuilder.Entity("LAB1.Entities.UserCategories.User", b =>
                {
                    b.HasOne("LAB1.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LAB1.Entities.Bank", b =>
                {
                    b.HasOne("LAB1.Entities.UserCategories.Client", null)
                        .WithMany("Banks")
                        .HasForeignKey("ClientId");

                    b.HasOne("LAB1.Entities.Company", null)
                        .WithOne()
                        .HasForeignKey("LAB1.Entities.Bank", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LAB1.Entities.UserCategories.Administrator", b =>
                {
                    b.HasOne("LAB1.Entities.UserCategories.User", null)
                        .WithOne()
                        .HasForeignKey("LAB1.Entities.UserCategories.Administrator", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LAB1.Entities.UserCategories.Client", b =>
                {
                    b.HasOne("LAB1.Entities.UserCategories.User", null)
                        .WithOne()
                        .HasForeignKey("LAB1.Entities.UserCategories.Client", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LAB1.Entities.UserCategories.Manager", null)
                        .WithMany("WaitingForCreditApprove")
                        .HasForeignKey("ManagerId");

                    b.HasOne("LAB1.Entities.UserCategories.Manager", null)
                        .WithMany("WaitingForInstallmentPlanApprove")
                        .HasForeignKey("ManagerId1");

                    b.HasOne("LAB1.Entities.UserCategories.Manager", null)
                        .WithMany("WaitingForRegistrationApprove")
                        .HasForeignKey("ManagerId2");

                    b.HasOne("LAB1.Entities.UserCategories.Operator", null)
                        .WithMany("ClientsWaitingForSalaryProject")
                        .HasForeignKey("OperatorId");

                    b.HasOne("LAB1.Entities.UserCategories.Specialist", null)
                        .WithMany("ClientsToPaymentProject")
                        .HasForeignKey("SpecialistId");

                    b.HasOne("LAB1.Entities.Company", "Work")
                        .WithMany("Workers")
                        .HasForeignKey("WorkId");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("LAB1.Entities.UserCategories.Operator", b =>
                {
                    b.HasOne("LAB1.Entities.UserCategories.User", null)
                        .WithOne()
                        .HasForeignKey("LAB1.Entities.UserCategories.Operator", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LAB1.Entities.UserCategories.Specialist", b =>
                {
                    b.HasOne("LAB1.Entities.Company", "Company")
                        .WithMany("Specialists")
                        .HasForeignKey("CompanyId");

                    b.HasOne("LAB1.Entities.UserCategories.User", null)
                        .WithOne()
                        .HasForeignKey("LAB1.Entities.UserCategories.Specialist", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("LAB1.Entities.UserCategories.Manager", b =>
                {
                    b.HasOne("LAB1.Entities.UserCategories.Operator", null)
                        .WithOne()
                        .HasForeignKey("LAB1.Entities.UserCategories.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LAB1.Entities.Company", b =>
                {
                    b.Navigation("Specialists");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("LAB1.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("LAB1.Entities.Bank", b =>
                {
                    b.Navigation("OpennedBankAccounts");

                    b.Navigation("OpennedBankDeposits");

                    b.Navigation("OpennedCredits");

                    b.Navigation("OpennedInstallmentPlans");
                });

            modelBuilder.Entity("LAB1.Entities.UserCategories.Administrator", b =>
                {
                    b.Navigation("ClosedDepositsToRollBack");

                    b.Navigation("DeletedBankAccounts");

                    b.Navigation("DeletedInstallmentPlans");

                    b.Navigation("OpennedBankAccounts");

                    b.Navigation("OpennedDepositsToRollBack");

                    b.Navigation("OpennedInstallmentPlans");

                    b.Navigation("TransfersBetweenBankAccounts");

                    b.Navigation("TransfersBetweenBankDeposits");
                });

            modelBuilder.Entity("LAB1.Entities.UserCategories.Client", b =>
                {
                    b.Navigation("Banks");

                    b.Navigation("BanksAndApproves");

                    b.Navigation("CreditsAndApproves");

                    b.Navigation("InstallmentPlansAndApproves");

                    b.Navigation("OpennedBankAccounts");

                    b.Navigation("OpennedBankDeposits");
                });

            modelBuilder.Entity("LAB1.Entities.UserCategories.Operator", b =>
                {
                    b.Navigation("ClientsWaitingForSalaryProject");
                });

            modelBuilder.Entity("LAB1.Entities.UserCategories.Specialist", b =>
                {
                    b.Navigation("ClientsToPaymentProject");
                });

            modelBuilder.Entity("LAB1.Entities.UserCategories.Manager", b =>
                {
                    b.Navigation("WaitingForCreditApprove");

                    b.Navigation("WaitingForInstallmentPlanApprove");

                    b.Navigation("WaitingForRegistrationApprove");
                });
#pragma warning restore 612, 618
        }
    }
}
